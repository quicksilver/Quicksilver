#!/usr/bin/env ruby
# encoding: UTF-8

## stringstool is a command-line tool built to help localization management by :
#  - extracting strings from IB files to .strings files
#  - allowing strings file to be merged (TODO)

## TODO
# wrap everything in a localization.sh file
# Would it be possible to flag up 'changes' to any of the strings. E.g. say we change a string "Update Quicksilver" to "Updating Quicksilver", is there any way we can flag this, so that we can deal with all the localizations that use "Update Quicksivler" = "Diweddaru Quicksilver"; in every language (that's Welsh btw ;-) )

VERSION = 1.0

begin
require 'trollop'
require 'plist'
rescue LoadError
  puts "Missing required gems, please run 'gem install trollop plist' first"
end

require 'tempfile' # Ruby stdlib

# Helpers

def extract_strings_from_ib(ib_file, output_dir, options = {})
  # Use ibtool to extract localizable strings for the IB file

  ignore_regexps = []
  if options[:ignored_strings]
    options[:ignored_strings].each do |string|
      ignore_regexps << Regexp.new(string)
    end
  end

  begin
    # Create the output directory if it doesn't exist
    FileUtils.mkdir_p output_dir unless Dir.exists? output_dir

    temp_file = Tempfile.new('stringstool-extract-')
    begin
      puts "Extracting strings from #{ib_file}..."
      Kernel.system("ibtool --export-strings-file #{temp_file.path} #{ib_file}")
      if $? != 0
        puts "Extraction failed, error #{$?}"
        return false
      end
    ensure
      temp_file.close
    end

    # Now parse back that file line by line and extract info from it
    puts "Reformatting..."
    strings_data = []
    strings = []
    File.open(temp_file.path, "r:UTF-16:UTF-8") do |file|
      file.each_line do |line|
        if match = line.match(/"(.*)" = "(.*)"/)
          comment, data = match[1], match[2]

          # Check for duplicates
          next if strings.include?(data)

          # Check for ignored keys
          ignore = false
          ignore_regexps.each do |regexp|
            ignore = true and break if data.match(regexp)
          end
          next if ignore

          strings_data << {:data => data, :comment => comment }
          strings << match[2]
        end
      end
    end

    # Sort strings by data
    strings_data.sort! {|a, b| a[:data] <=> b[:data] }

    puts "Creating strings file in #{output_dir}..."

    # Now write that data with the correct format at the output path
    output_file_name = File.basename(ib_file, File.extname(ib_file)) + ".strings"
    output_file = File.join(output_dir, output_file_name)

    File.open(output_file, "w") do |file|
      file.write "/* File extracted from #{ib_file} by stringstool v#{VERSION}*/\n\n"
      strings_data.each do |item|
        file.write "/* %s */\n\"%s\" = \"%s\";\n\n" % [item[:comment], item[:data], item[:data]]
      end
    end
  ensure
    File.unlink(temp_file)
  end

  puts "Extracted strings from #{ib_file} to #{output_file}"
  return true
end

# Main script

SUB_COMMANDS = ['extract-interface-builder']
$global_opts = Trollop::options do
  version "stringstool v#{VERSION}"

  opt :output_directory, "Output directory", :type => :string, :required => true

  banner <<-END
stringstool:

  Global options:
    --output-directory, -o: A path to a directory where the extracted files will be generated.

  Commands:
    extract-interface-builder
      Extracts localizable strings from an Interface Builder file
        --ignored-strings, -i : A comma-separated list of regular expressions which will be ignored.

  Options:
END

  stop_on SUB_COMMANDS
end

cmd = ARGV.shift
cmd_opts = case cmd
when "extract-interface-builder" then
  opts = Trollop::options do
    opt :ignored_strings, "Ignored strings", :type => :strings
  end

  ib_files = ARGV
  ib_files.each do |file|
    extract_strings_from_ib file, $global_opts[:output_directory], :ignored_strings => opts[:ignored_strings]
  end
  puts "Extraction complete, #{ib_files.count} files processed."
else
  Trollop::die "Unknown subcommand \"#{cmd}\""
end
