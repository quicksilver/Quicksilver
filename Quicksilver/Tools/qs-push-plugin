#!/usr/bin/env ruby
# encoding: UTF-8

#####################################################################
# Quicksilver Plugin Upload Script
# Created by Etienne Samson
#
# INSTALLATION
# Symlink somewhere in your path so that your shell sees it with
# `ln -s <absolute-path-to-script> ~/bin/`. My own preference is ~/bin,
# since that's in my path, but change that to anywhere else you like.
#
# Don't forget to make executable again (chmod +x qs-push-plugin), and
# install the required gems (`gem install trollop rest-client plist`)
#
# Try qs-push-plugin -h for usage.
######################################################################

# Ruby StdLib
require 'time'
require 'fileutils'

# Rubygems
require 'rubygems'
require 'trollop'
require 'rest-client'
require 'plist'

# FUNCTIONS


# MAIN SCRIPT

DEFAULT_USER = "qs"
DEFAULT_HOST = "http://qs0.qsapp.com/plugins"

options = Trollop::options do
  banner "Usage: qs-push-plugin [-h|--help] [ARGS]"
  text "This script is intended as a command-line interface to the plugin update system. It makes uploading plugins and application updates easier, without the need to go through the web interface."
  text ""
  text "ARGS can be an array of paths to bundles/archives, a single path to a bundle or nothing. Simply use `qs-push-plugin <path-to-file>` to push a single file, or use a file glob like <path-to-plugins/*.qsplugin> to upload all in a folder"
  text ""
  banner "OPTIONS:"
  opt :help, "Show this message", :short => "-h"
  opt :user, "User to login as", :default => DEFAULT_USER, :short => "-u"
  opt :password, "Password to use (will be asked if missing)", :type => :string, :short => "-p"
  opt :host, "Push to a specific host.", :default => DEFAULT_HOST
  opt :level, "Override the level at which to publish the update", :type => :int, :default => nil
  opt :secret, "Override the secret parameter from the plist", :type => :bool, :default => nil
  opt :changes, "Add a list of changes for the plugin in HTML format", :type => :string, :short => "-c", :default => nil
end

files = ARGV

type_regexp = /\.[qsplugin|dmg]/
file_matcher = Proc.new {|file| File.extname(file) =~ type_regexp }
case files
when String then
  files = [files]
when Array then
  files = files.select &file_matcher
else
  files = Dir.glob("*")
  files = files.select &file_matcher
end

unless options[:changes]
  Trollop::die "You must add a changelog using the '-c' option"
end

# TODO: Only ask the password if the remote asks for it.
unless options[:password]
  print "Password for user \"#{options[:user]}\": "
  options[:password] = STDIN.gets.chomp
end

# Now push those plugins !

api_url = "#{options[:host]}/admin/add.php"
api = RestClient::Resource.new api_url, :user => options.user, :password => options.password
archive_dir = File.join("/","var", "tmp", "qs-push-plugin")
dmg_path = nil

unless files.empty?
  puts "Submitting \"#{files.join "\", \""}\" to \"#{api_url}\""
else
  Trollop::die "No known files passed"
end

files.each do |file|
  unless File.exists?(file)
    puts "File not found: \"#{file}\""
    next
  end

  begin
    # build arguments
    args = {
      :submit => "New",
      :plugin_archive_file => nil,
      :info_plist_file => nil,
      :mod_date => nil
    }
    args[:secret] = options.secret if options.secret
    args[:level] = options.level if options.level

    case File.extname(file)
    when ".qsplugin" then
      # Plugin bundle
      archive_path = File.join(archive_dir, File.basename(file, File.extname(file)).gsub(" ", "_") + "-archive")
      info_path = File.join(file, "Contents", "Info.plist")

      # Try to find an icon...
      plist = Plist::parse_xml(info_path)
      
      # Make sure the file is a 32/64 bit binary
      
      image_file = if image_path = plist['QSPlugIn']['icon']
        path = Dir.glob(File.join(file, "Contents", "Resources", image_path + ".[jpg|png]"))
        File.new(path.first) if path.first
      elsif image_path = plist['QSPlugIn']['webIcon']
      else
        nil
      end
      puts "Sending image \"#{image_path}\"" if image_file
      
      res = %x(ditto -c -z --keepParent \"#{file}\" \"#{archive_path}\")

      args[:plugin_archive_file] = File.new(archive_path)
      args[:info_plist_file] = File.new(info_path)
      args[:image_file] = image_file if image_file
      args[:image_ext] = File.extname(image_file) if image_file
      args[:mod_date] = File.new(file).mtime
      args[:changes] = options[:changes]
      
    when ".dmg" then
      # Disk image
      puts "Attaching \"#{file}\""
      res = `hdiutil attach -plist -nobrowse \"#{file}\"`
      plist = Plist::parse_xml(res)
      if plist.nil?
        Trollop::die "Failed to attach \"#{file}\""
      else
        
        # Make sure the file is a 32/64 bit binary
        checkIsUniversalBinary(plist, file)
        
        # pp plist
        dmg_path = plist['system-entities'].collect {|a| a['mount-point'] }.compact.first
        # pp dmg_path
        qs_app = File.join('/', 'Volumes', 'Quicksilver', 'Quicksilver.app')
        info_path = File.join(qs_app, 'Contents', 'Info.plist')

        args[:plugin_archive_file] = File.new(file)
        args[:info_plist_file] = File.new(info_path)
        args[:mod_date] = args[:plugin_archive_file].mtime
        args[:is_app] = true
      end
    else
      Trollop::die "Unknown type #{File.extname(file)}"
    end

    # perform the request
    print "Submitting \"#{file}\"..."
    begin
      # pp "Performing request: #{args}"
      res = api.post args
      puts " OK"
    rescue RestClient::Exception => e
      puts e.response
    end
    # pp res
  ensure
    FileUtils.rm_r archive_dir if File.exists?(archive_dir)
    if dmg_path
      puts "Detaching \"#{dmg_path}\""
      `hdiutil detach \"#{dmg_path}\"`
      dmg_path = nil
    end
  end
end